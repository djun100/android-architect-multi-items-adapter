Demo1 是错误的案例， 每次需要不同类型布局的时候 都inflate一下 view没重复利用 最终会内存溢出，而且不能快速滑动


Demo2 在demo1上 多布局优化，最多每个类型都inflate 一屏缓存


Demo3 使用一个布局，inflate 1屏的缓存。   

注： 测试的时候 大家可以看控制台 inflate的打印

那个ItemView 就是holder 只是我喜欢取名itemView 意思就是item对应的view 可以用群共享find生成 生成adapter跟itemView


关于demo2， demo3的优缺点。。 两个都是可以用的。

demo3 是一次性加载一屏 以后快速滑动什么的 都不会inflate的，
加载的数量  比如一屏加载 4个item 每个item分2个类型 就是8个

缺点是一次性加载的太多  

优点是  滑动不会卡  


demo2 是按需加载，但最终加载的 肯定是跟demo3 一样的，
加载数量  每个item都会加载一屏的缓存，可以看打印。
demo2的优点是 不用一次性全部加载 用都不够了再去加载。 

缺点是 可能快速滑动的时候刚好那一屏类型的view都没inflate 或者有个别类型的没inflate满，就会走inflate方法 可能会卡一下， 刚开始滑动肯定没demo3流畅，等都缓存完了 其实就跟demo3缓存的数量是一样的。。滑动速度也是一样的。 